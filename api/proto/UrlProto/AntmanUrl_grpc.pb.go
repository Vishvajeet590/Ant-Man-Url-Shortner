// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Antman

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntmanUrlRoutesClient is the client API for AntmanUrlRoutes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntmanUrlRoutesClient interface {
	GetShortUrl(ctx context.Context, in *ShortUrlRequest, opts ...grpc.CallOption) (*ShortUrlResponse, error)
	DeleteUrl(ctx context.Context, in *DeleteUrlRequest, opts ...grpc.CallOption) (*DeleteUrlResponse, error)
	GetLongUrl(ctx context.Context, in *LongUrlRequest, opts ...grpc.CallOption) (*LongUrlResponse, error)
}

type antmanUrlRoutesClient struct {
	cc grpc.ClientConnInterface
}

func NewAntmanUrlRoutesClient(cc grpc.ClientConnInterface) AntmanUrlRoutesClient {
	return &antmanUrlRoutesClient{cc}
}

func (c *antmanUrlRoutesClient) GetShortUrl(ctx context.Context, in *ShortUrlRequest, opts ...grpc.CallOption) (*ShortUrlResponse, error) {
	out := new(ShortUrlResponse)
	err := c.cc.Invoke(ctx, "/UrlServer.AntmanUrlRoutes/GetShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antmanUrlRoutesClient) DeleteUrl(ctx context.Context, in *DeleteUrlRequest, opts ...grpc.CallOption) (*DeleteUrlResponse, error) {
	out := new(DeleteUrlResponse)
	err := c.cc.Invoke(ctx, "/UrlServer.AntmanUrlRoutes/DeleteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antmanUrlRoutesClient) GetLongUrl(ctx context.Context, in *LongUrlRequest, opts ...grpc.CallOption) (*LongUrlResponse, error) {
	out := new(LongUrlResponse)
	err := c.cc.Invoke(ctx, "/UrlServer.AntmanUrlRoutes/GetLongUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntmanUrlRoutesServer is the server API for AntmanUrlRoutes service.
// All implementations must embed UnimplementedAntmanUrlRoutesServer
// for forward compatibility
type AntmanUrlRoutesServer interface {
	GetShortUrl(context.Context, *ShortUrlRequest) (*ShortUrlResponse, error)
	DeleteUrl(context.Context, *DeleteUrlRequest) (*DeleteUrlResponse, error)
	GetLongUrl(context.Context, *LongUrlRequest) (*LongUrlResponse, error)
	mustEmbedUnimplementedAntmanUrlRoutesServer()
}

// UnimplementedAntmanUrlRoutesServer must be embedded to have forward compatible implementations.
type UnimplementedAntmanUrlRoutesServer struct {
}

func (UnimplementedAntmanUrlRoutesServer) GetShortUrl(context.Context, *ShortUrlRequest) (*ShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUrl not implemented")
}
func (UnimplementedAntmanUrlRoutesServer) DeleteUrl(context.Context, *DeleteUrlRequest) (*DeleteUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUrl not implemented")
}
func (UnimplementedAntmanUrlRoutesServer) GetLongUrl(context.Context, *LongUrlRequest) (*LongUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongUrl not implemented")
}
func (UnimplementedAntmanUrlRoutesServer) mustEmbedUnimplementedAntmanUrlRoutesServer() {}

// UnsafeAntmanUrlRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntmanUrlRoutesServer will
// result in compilation errors.
type UnsafeAntmanUrlRoutesServer interface {
	mustEmbedUnimplementedAntmanUrlRoutesServer()
}

func RegisterAntmanUrlRoutesServer(s grpc.ServiceRegistrar, srv AntmanUrlRoutesServer) {
	s.RegisterService(&AntmanUrlRoutes_ServiceDesc, srv)
}

func _AntmanUrlRoutes_GetShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntmanUrlRoutesServer).GetShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UrlServer.AntmanUrlRoutes/GetShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntmanUrlRoutesServer).GetShortUrl(ctx, req.(*ShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntmanUrlRoutes_DeleteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntmanUrlRoutesServer).DeleteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UrlServer.AntmanUrlRoutes/DeleteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntmanUrlRoutesServer).DeleteUrl(ctx, req.(*DeleteUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntmanUrlRoutes_GetLongUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntmanUrlRoutesServer).GetLongUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UrlServer.AntmanUrlRoutes/GetLongUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntmanUrlRoutesServer).GetLongUrl(ctx, req.(*LongUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntmanUrlRoutes_ServiceDesc is the grpc.ServiceDesc for AntmanUrlRoutes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntmanUrlRoutes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UrlServer.AntmanUrlRoutes",
	HandlerType: (*AntmanUrlRoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortUrl",
			Handler:    _AntmanUrlRoutes_GetShortUrl_Handler,
		},
		{
			MethodName: "DeleteUrl",
			Handler:    _AntmanUrlRoutes_DeleteUrl_Handler,
		},
		{
			MethodName: "GetLongUrl",
			Handler:    _AntmanUrlRoutes_GetLongUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/UrlProto/AntmanUrl.proto",
}
